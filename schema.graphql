type _Schema_
  @fulltext(
    name: "strategySearch"
    language: en
    algorithm: rank
    include: [
      { entity: "Strategy", fields: [{ name: "name" }, { name: "symbol" }] }
    ]
  )

type Platform @entity {
  id: ID!
  strategiesCount: Int!
  managersCount: Int!
  allManagers: [String!]!
  allStrategies: [String!]!
  tokens: [String!]!
}

type Manager @entity {
  id: ID!
  strategiesCount: Int!
  strategies: [Strategy!]!
  createdAtTimestamp: BigInt!
  tvl: BigDecimal!
  holdersCount: Int!
  commonItems: [CommonItem!]!
  managerDaysData: [ManagerDayData!]! @derivedFrom(field: "manager")
  managerChanges: [ManagerChanges!]! @derivedFrom(field: "manager")
  managerTrends: [ManagerTrends!]! @derivedFrom(field: "manager")
  claimedPerfFee: [ClaimedPerfFee!]! @derivedFrom(field: "manager")
}

type Strategy @entity {
  id: ID!
  manager: Manager!
  name: String!
  symbol: String!
  state: StrategyState
  createdAtTimestamp: BigInt!
  tvl: BigDecimal!
  price: BigDecimal!
  holdersCount: Int!
  createdAtBlockNumber: BigInt!
  items: [StrategyItemHolding!]!
  lastRestructure: BigInt!
  totalSupply: BigDecimal!
  tokenHolders: [StrategyTokenHolding]! @derivedFrom(field: "strategy")
  strategyDaysData: [StrategyDayData!]! @derivedFrom(field: "strategy")
  strategyChanges: [StrategyChanges!]! @derivedFrom(field: "strategy")
  rebalances: [Rebalance]! @derivedFrom(field: "strategy")
  restructures: [Restructure]! @derivedFrom(field: "strategy")
  trends: StrategyTrends! @derivedFrom(field: "strategy")
}

type StrategyTrends @entity {
  id: ID!
  strategy: Strategy!
  trend1d: BigDecimal!
  trend7d: BigDecimal!
  trend30d: BigDecimal!
  trendAll: BigDecimal!
}

type ManagerTrends @entity {
  id: ID!
  manager: Manager!
  trend1d: BigDecimal!
  trend7d: BigDecimal!
  trend30d: BigDecimal!
  trendAll: BigDecimal!
}

type StrategyState @entity {
  id: ID!
  restructure: BigInt!
  threshold: BigInt!
  social: Boolean!
  fixed: Boolean!
  fee: BigInt!
  rebalanceSlippage: BigInt!
  restructureSlippage: BigInt!
  timelock: BigInt!
}

type StrategyTokenHolding @entity {
  id: ID!
  investor: String!
  strategy: Strategy!
  balance: BigDecimal!
}

type StrategyTokenHoldingData @entity {
  id: ID!
  investor: String!
  strategy: Strategy!
  balance: BigDecimal!
}

type StrategyItemHolding @entity {
  id: ID!
  timestamp: BigInt!
  token: Token!
  strategy: Strategy
  percentage: BigInt!
  balance: BigDecimal!
  adapters: [Bytes!]!
  path: [Bytes!]!
}

type EthUsdFeed @entity {
  id: ID!
  latestAggregator: String!
  latestAnswer: BigDecimal!
}

type CommonItem @entity {
  id: ID! # token/manager
  token: Token!
  strategy: Strategy
  percentage: BigDecimal!
}

type Token @entity {
  # token address
  id: ID!
  # mirrored from the smart contract
  name: String!
  symbol: String!
  decimals: BigInt!

  # Category is defined within Enso by the TokenRegistry contract
  category: Category!
}

type StrategyDayData @entity {
  # strategy address + timestamp
  id: ID!
  strategy: Strategy!
  timestamp: BigInt!
  tvlLastTracked: BigDecimal!
  priceLastTracked: BigDecimal!
  holdersCount: Int!
}

type StrategyChanges @entity {
  id: ID!
  strategy: Strategy!
  tvl1d: BigDecimal!
  tvl1w: BigDecimal!
  tvl1m: BigDecimal!
  tvlInception: BigDecimal!
  price1d: BigDecimal!
  price1w: BigDecimal!
  price1m: BigDecimal!
  priceInception: BigDecimal!
  holders1d: Int!
}

type ManagerChanges @entity {
  id: ID!
  manager: Manager!
  tvl1d: BigDecimal!
  tvl1w: BigDecimal!
  tvl1m: BigDecimal!
  tvlInception: BigDecimal!
  holders1d: Int!
}

type ManagerDayData @entity {
  # strategy address + timestamp
  id: ID!
  manager: Manager!
  timestamp: BigInt!
  tvlLastTracked: BigDecimal!
  holdersCount: Int!
}

type Rebalance @entity {
  id: ID!
  txHash: String!
  strategy: Strategy!
  timestamp: BigInt!
  before: [StrategyItemHolding!]!
  after: [StrategyItemHolding!]!
}

type Restructure @entity {
  id: ID!
  txHash: String!
  status: RestructureStatus!
  strategy: Strategy!
  timestamp: BigInt!
  before: [StrategyItemHolding!]!
  after: [StrategyItemHolding!]!
}

type Cron @entity {
  id: ID!
  cron: BigInt!
}

enum RestructureStatus {
  STARTED
  FINALIZED
}

type ClaimedPerfFee @entity {
  id: ID!
  manager: Manager!
  strategy: Strategy!
  amount: BigDecimal!
}

enum Category {
  DEFAULT_ORACLE
  CHAINLINK_ORACLE
  UNISWAP_TWAP_ORACLE
  SUSHI_TWAP_ORACLE
  STRATEGY
  BLOCKED
  AAVE
  AAVE_DEBT
  BALANCER
  COMPOUND
  CURVE
  CURVE_GAUGE
  SUSHI_LP
  SUSHI_FARM
  UNISWAP_V2_LP
  UNISWAP_V3_LP
  YEARN_V1
  YEARN_V2
}
